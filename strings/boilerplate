_css=<<__css__
<!--
p.journal
{
    margin-bottom:4px;
    margin-top:4px;
    text-indent:0em;
    line-height: 1.2em;
}
h3.journal
{
    font-family:sans-serif;
    line-height:1;
}
h4.journal
{
    font-family:sans-serif;
    line-height:1;
}
h5.journal
{
    font-family:sans-serif;
    line-height:1;
}
-->
__css__

header_html=<<__html__
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="http://www.w3.org/Math/XSL/mathml.xsl"?>
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD>
<TITLE>$title</TITLE>
<META HTTP-EQUIV="Pragma" CONTENT="no-cache"/>
<! -- stuff for ASCIIMath: -->
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<style type="text/css">$_css</style>
</HEAD>
<script src="$spotter_js_dir/ASCIIMathML.js"></script>
<body  bgcolor="white" onload="init_asciimath_inputs()">
__html__

default_banner_html=<<__html__
    <table><tr><td><img src="http://www.lightandmatter.com/spotter/spotterlogo.jpg" width="123" height="184"></td><td>
    <h1>Spotter</h1>
    <p>A numerical and symbolic answer<br/>
       checker for math and science students.</p>
    <p><a href="http://www.lightandmatter.com/spotter/spotter.html">About Spotter</a>.<p/>

    </td></tr></table>
__html__

footer_html=<<__html__
<p>On-the fly rendering of mathematics is done by Peter Jipsen's <a href=\"http://asciimathml.sourceforge.net\">ASCIIMath</a>.</p>
$footer_file
</body></html>
__html__

asciimath_js_code=<<__js__
//--------------- begin javascript code -------------------
//script to render Spotter input using MathML, via ASCIIMath

//a modification by B. Crowell of the script ASCIIMathCalculator.js by Peter Jipsen

//(c) Peter Jipsen http://www.chapman.edu/~jipsen
//(c) B. Crowell

//Requires http://www.chapman.edu/~jipsen/mathml/ASCIIMathML.js

//License: GNU General Public License (http://www.gnu.org/copyleft/gpl.html)


AMinitSymbols();

function init_asciimath_inputs() {
  var li = document.getElementsByTagName("input");
  var st;
  for (var i=0; i<li.length; i++) {
    st = li[i].getAttribute("onkeyup");
    if (st!=null) eval(String(st).replace(/function anonymous\(\)/,""));
  }
}


function render(inputId,outputId,variables) {
  var str = document.getElementById(inputId).value;
  var outnode = document.getElementById(outputId);
  var n = outnode.childNodes.length;
  for (var i=0; i<n; i++)
    outnode.removeChild(outnode.firstChild);
  str = str.replace(/\*\*/g,"^"); // Spotter allows fortran-style use of ** for exponentiation
  var cooked = new Array();
  for (var i=0; i<variables.length; i++) {
   var u = variables[i];
   var v = format_variable_name(u);
   if (u!=v) str = str.replace(new RegExp(u,"g"),v);
  }
  if (AMisMathMLavailable() != null) {
    str = '--This feature is not available in your browser.--';
  }
  else  {
    str = "`"+str+"`";
  }
  outnode.appendChild(document.createTextNode(str));
  AMprocessNode(outnode);
}

// exmaples: alpha1 -> alpha_(1) , mus -> mu_(s) , Ftotal -> F_(total)
// problems: operators like eq will get treated as variables, rendered as e_(q)
// Escaped dollar signs in the following for use with tint.
function format_variable_name(x) {
  y = x.replace(/^(alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Alpha|Beta|Gamma|Delta|Epsilon|Zeta|Eta|Theta|Iota|Kappa|Lambda|Mu|Nu|Xi|Omicron|Pi|Rho|Sigma|Tau|Upsilon|Phi|Chi|Psi|Omega)(.*)\$/g,"\$1_(\$2)");
  if (y!=x) return y;
  y = x.replace(/^(.)(.+)\$/,"\$1_(\$2)");
  return y;
}
//--------------- end javascript code -------------------
__js__
